// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api/ent/habit"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HabitCreate is the builder for creating a Habit entity.
type HabitCreate struct {
	config
	mutation *HabitMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (hc *HabitCreate) SetName(s string) *HabitCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetDescription sets the "description" field.
func (hc *HabitCreate) SetDescription(s string) *HabitCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hc *HabitCreate) SetNillableDescription(s *string) *HabitCreate {
	if s != nil {
		hc.SetDescription(*s)
	}
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HabitCreate) SetCreatedAt(t time.Time) *HabitCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HabitCreate) SetNillableCreatedAt(t *time.Time) *HabitCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// Mutation returns the HabitMutation object of the builder.
func (hc *HabitCreate) Mutation() *HabitMutation {
	return hc.mutation
}

// Save creates the Habit in the database.
func (hc *HabitCreate) Save(ctx context.Context) (*Habit, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HabitCreate) SaveX(ctx context.Context) *Habit {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HabitCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HabitCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HabitCreate) defaults() {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		v := habit.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HabitCreate) check() error {
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Habit.name"`)}
	}
	if v, ok := hc.mutation.Name(); ok {
		if err := habit.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Habit.name": %w`, err)}
		}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Habit.created_at"`)}
	}
	return nil
}

func (hc *HabitCreate) sqlSave(ctx context.Context) (*Habit, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HabitCreate) createSpec() (*Habit, *sqlgraph.CreateSpec) {
	var (
		_node = &Habit{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(habit.Table, sqlgraph.NewFieldSpec(habit.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(habit.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.SetField(habit.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(habit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// HabitCreateBulk is the builder for creating many Habit entities in bulk.
type HabitCreateBulk struct {
	config
	err      error
	builders []*HabitCreate
}

// Save creates the Habit entities in the database.
func (hcb *HabitCreateBulk) Save(ctx context.Context) ([]*Habit, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Habit, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HabitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HabitCreateBulk) SaveX(ctx context.Context) []*Habit {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HabitCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HabitCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
